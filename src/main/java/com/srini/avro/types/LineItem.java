/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.srini.avro.types;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LineItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8363342400254504582L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LineItem\",\"namespace\":\"com.srini.avro.types\",\"fields\":[{\"name\":\"itemCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"itemDescription\",\"type\":[\"null\",\"string\"]},{\"name\":\"itemPrice\",\"type\":[\"null\",\"double\"]},{\"name\":\"itemQty\",\"type\":[\"null\",\"int\"]},{\"name\":\"totalValue\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LineItem> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LineItem> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LineItem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LineItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LineItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LineItem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LineItem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LineItem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LineItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence itemCode;
  private java.lang.CharSequence itemDescription;
  private java.lang.Double itemPrice;
  private java.lang.Integer itemQty;
  private java.lang.Double totalValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LineItem() {}

  /**
   * All-args constructor.
   * @param itemCode The new value for itemCode
   * @param itemDescription The new value for itemDescription
   * @param itemPrice The new value for itemPrice
   * @param itemQty The new value for itemQty
   * @param totalValue The new value for totalValue
   */
  public LineItem(java.lang.CharSequence itemCode, java.lang.CharSequence itemDescription, java.lang.Double itemPrice, java.lang.Integer itemQty, java.lang.Double totalValue) {
    this.itemCode = itemCode;
    this.itemDescription = itemDescription;
    this.itemPrice = itemPrice;
    this.itemQty = itemQty;
    this.totalValue = totalValue;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return itemCode;
    case 1: return itemDescription;
    case 2: return itemPrice;
    case 3: return itemQty;
    case 4: return totalValue;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: itemCode = (java.lang.CharSequence)value$; break;
    case 1: itemDescription = (java.lang.CharSequence)value$; break;
    case 2: itemPrice = (java.lang.Double)value$; break;
    case 3: itemQty = (java.lang.Integer)value$; break;
    case 4: totalValue = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'itemCode' field.
   * @return The value of the 'itemCode' field.
   */
  public java.lang.CharSequence getItemCode() {
    return itemCode;
  }


  /**
   * Sets the value of the 'itemCode' field.
   * @param value the value to set.
   */
  public void setItemCode(java.lang.CharSequence value) {
    this.itemCode = value;
  }

  /**
   * Gets the value of the 'itemDescription' field.
   * @return The value of the 'itemDescription' field.
   */
  public java.lang.CharSequence getItemDescription() {
    return itemDescription;
  }


  /**
   * Sets the value of the 'itemDescription' field.
   * @param value the value to set.
   */
  public void setItemDescription(java.lang.CharSequence value) {
    this.itemDescription = value;
  }

  /**
   * Gets the value of the 'itemPrice' field.
   * @return The value of the 'itemPrice' field.
   */
  public java.lang.Double getItemPrice() {
    return itemPrice;
  }


  /**
   * Sets the value of the 'itemPrice' field.
   * @param value the value to set.
   */
  public void setItemPrice(java.lang.Double value) {
    this.itemPrice = value;
  }

  /**
   * Gets the value of the 'itemQty' field.
   * @return The value of the 'itemQty' field.
   */
  public java.lang.Integer getItemQty() {
    return itemQty;
  }


  /**
   * Sets the value of the 'itemQty' field.
   * @param value the value to set.
   */
  public void setItemQty(java.lang.Integer value) {
    this.itemQty = value;
  }

  /**
   * Gets the value of the 'totalValue' field.
   * @return The value of the 'totalValue' field.
   */
  public java.lang.Double getTotalValue() {
    return totalValue;
  }


  /**
   * Sets the value of the 'totalValue' field.
   * @param value the value to set.
   */
  public void setTotalValue(java.lang.Double value) {
    this.totalValue = value;
  }

  /**
   * Creates a new LineItem RecordBuilder.
   * @return A new LineItem RecordBuilder
   */
  public static com.srini.avro.types.LineItem.Builder newBuilder() {
    return new com.srini.avro.types.LineItem.Builder();
  }

  /**
   * Creates a new LineItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LineItem RecordBuilder
   */
  public static com.srini.avro.types.LineItem.Builder newBuilder(com.srini.avro.types.LineItem.Builder other) {
    if (other == null) {
      return new com.srini.avro.types.LineItem.Builder();
    } else {
      return new com.srini.avro.types.LineItem.Builder(other);
    }
  }

  /**
   * Creates a new LineItem RecordBuilder by copying an existing LineItem instance.
   * @param other The existing instance to copy.
   * @return A new LineItem RecordBuilder
   */
  public static com.srini.avro.types.LineItem.Builder newBuilder(com.srini.avro.types.LineItem other) {
    if (other == null) {
      return new com.srini.avro.types.LineItem.Builder();
    } else {
      return new com.srini.avro.types.LineItem.Builder(other);
    }
  }

  /**
   * RecordBuilder for LineItem instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LineItem>
    implements org.apache.avro.data.RecordBuilder<LineItem> {

    private java.lang.CharSequence itemCode;
    private java.lang.CharSequence itemDescription;
    private java.lang.Double itemPrice;
    private java.lang.Integer itemQty;
    private java.lang.Double totalValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.srini.avro.types.LineItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.itemCode)) {
        this.itemCode = data().deepCopy(fields()[0].schema(), other.itemCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.itemDescription)) {
        this.itemDescription = data().deepCopy(fields()[1].schema(), other.itemDescription);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.itemPrice)) {
        this.itemPrice = data().deepCopy(fields()[2].schema(), other.itemPrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.itemQty)) {
        this.itemQty = data().deepCopy(fields()[3].schema(), other.itemQty);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.totalValue)) {
        this.totalValue = data().deepCopy(fields()[4].schema(), other.totalValue);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing LineItem instance
     * @param other The existing instance to copy.
     */
    private Builder(com.srini.avro.types.LineItem other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.itemCode)) {
        this.itemCode = data().deepCopy(fields()[0].schema(), other.itemCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.itemDescription)) {
        this.itemDescription = data().deepCopy(fields()[1].schema(), other.itemDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemPrice)) {
        this.itemPrice = data().deepCopy(fields()[2].schema(), other.itemPrice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemQty)) {
        this.itemQty = data().deepCopy(fields()[3].schema(), other.itemQty);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalValue)) {
        this.totalValue = data().deepCopy(fields()[4].schema(), other.totalValue);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'itemCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemCode() {
      return itemCode;
    }


    /**
      * Sets the value of the 'itemCode' field.
      * @param value The value of 'itemCode'.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder setItemCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.itemCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'itemCode' field has been set.
      * @return True if the 'itemCode' field has been set, false otherwise.
      */
    public boolean hasItemCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'itemCode' field.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder clearItemCode() {
      itemCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemDescription() {
      return itemDescription;
    }


    /**
      * Sets the value of the 'itemDescription' field.
      * @param value The value of 'itemDescription'.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder setItemDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.itemDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'itemDescription' field has been set.
      * @return True if the 'itemDescription' field has been set, false otherwise.
      */
    public boolean hasItemDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'itemDescription' field.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder clearItemDescription() {
      itemDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemPrice' field.
      * @return The value.
      */
    public java.lang.Double getItemPrice() {
      return itemPrice;
    }


    /**
      * Sets the value of the 'itemPrice' field.
      * @param value The value of 'itemPrice'.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder setItemPrice(java.lang.Double value) {
      validate(fields()[2], value);
      this.itemPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'itemPrice' field has been set.
      * @return True if the 'itemPrice' field has been set, false otherwise.
      */
    public boolean hasItemPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'itemPrice' field.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder clearItemPrice() {
      itemPrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemQty' field.
      * @return The value.
      */
    public java.lang.Integer getItemQty() {
      return itemQty;
    }


    /**
      * Sets the value of the 'itemQty' field.
      * @param value The value of 'itemQty'.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder setItemQty(java.lang.Integer value) {
      validate(fields()[3], value);
      this.itemQty = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'itemQty' field has been set.
      * @return True if the 'itemQty' field has been set, false otherwise.
      */
    public boolean hasItemQty() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'itemQty' field.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder clearItemQty() {
      itemQty = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalValue' field.
      * @return The value.
      */
    public java.lang.Double getTotalValue() {
      return totalValue;
    }


    /**
      * Sets the value of the 'totalValue' field.
      * @param value The value of 'totalValue'.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder setTotalValue(java.lang.Double value) {
      validate(fields()[4], value);
      this.totalValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalValue' field has been set.
      * @return True if the 'totalValue' field has been set, false otherwise.
      */
    public boolean hasTotalValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalValue' field.
      * @return This builder.
      */
    public com.srini.avro.types.LineItem.Builder clearTotalValue() {
      totalValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LineItem build() {
      try {
        LineItem record = new LineItem();
        record.itemCode = fieldSetFlags()[0] ? this.itemCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.itemDescription = fieldSetFlags()[1] ? this.itemDescription : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.itemPrice = fieldSetFlags()[2] ? this.itemPrice : (java.lang.Double) defaultValue(fields()[2]);
        record.itemQty = fieldSetFlags()[3] ? this.itemQty : (java.lang.Integer) defaultValue(fields()[3]);
        record.totalValue = fieldSetFlags()[4] ? this.totalValue : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LineItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<LineItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LineItem>
    READER$ = (org.apache.avro.io.DatumReader<LineItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.itemCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.itemCode);
    }

    if (this.itemDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.itemDescription);
    }

    if (this.itemPrice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.itemPrice);
    }

    if (this.itemQty == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.itemQty);
    }

    if (this.totalValue == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalValue);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.itemCode = null;
      } else {
        this.itemCode = in.readString(this.itemCode instanceof Utf8 ? (Utf8)this.itemCode : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.itemDescription = null;
      } else {
        this.itemDescription = in.readString(this.itemDescription instanceof Utf8 ? (Utf8)this.itemDescription : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.itemPrice = null;
      } else {
        this.itemPrice = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.itemQty = null;
      } else {
        this.itemQty = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalValue = null;
      } else {
        this.totalValue = in.readDouble();
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.itemCode = null;
          } else {
            this.itemCode = in.readString(this.itemCode instanceof Utf8 ? (Utf8)this.itemCode : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.itemDescription = null;
          } else {
            this.itemDescription = in.readString(this.itemDescription instanceof Utf8 ? (Utf8)this.itemDescription : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.itemPrice = null;
          } else {
            this.itemPrice = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.itemQty = null;
          } else {
            this.itemQty = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalValue = null;
          } else {
            this.totalValue = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










